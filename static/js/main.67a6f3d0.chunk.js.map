{"version":3,"sources":["redux/actionTypes.js","redux/reducers/posts.js","redux/reducers/users.js","redux/reducers/comments.js","redux/reducers/index.js","redux/store.js","components/ErrorBoundary/Error404.jsx","components/ErrorBoundary/ErrorBoundary.jsx","App.js","index.js"],"names":["ADD_POST","REMOVE_POST","EDIT_POST","FETCH_ALL_POSTS","FETCH_ALL_POSTS_FAILURE","FETCH_USERDATA","FETCH_USERDATA_FAILURE","FETCH_COMMENTS","FETCH_COMMENTS_FAILURE","INITIAL_STATE","posts","initialNumberOfPosts","error","state","type","payload","title","body","userId","id","map","post","filter","users","comments","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","middlewares","thunk","store","createStore","applyMiddleware","persistor","persistStore","Error404","className","ErrorBoundary","hasErrored","info","console","log","this","props","children","_error","Component","HomePage","lazy","PostPage","AddPostPage","App","fallback","exact","path","render","to","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.67a6f3d0.chunk.js","sourcesContent":["export const ADD_POST = \"ADD_POST\";\r\nexport const REMOVE_POST = \"REMOVE_POST\";\r\nexport const EDIT_POST = \"EDIT_POST\";\r\n\r\nexport const FETCH_ALL_POSTS = \"FETCH_ALL_POSTS\";\r\nexport const FETCH_ALL_POSTS_FAILURE = \"FETCH_ALL_POSTS_FAILURE\";\r\n\r\nexport const FETCH_USERDATA = \"FETCH_USERDATA\";\r\nexport const FETCH_USERDATA_FAILURE = \"FETCH_USERDATA_FAILURE\";\r\n\r\nexport const FETCH_COMMENTS = \"FETCH_COMMENTS\";\r\nexport const FETCH_COMMENTS_FAILURE = \"FETCH_COMMENTS_FAILURE\";\r\n","import {\r\n  ADD_POST,\r\n  REMOVE_POST,\r\n  EDIT_POST,\r\n  FETCH_ALL_POSTS,\r\n  FETCH_ALL_POSTS_FAILURE\r\n} from \"../actionTypes\";\r\n\r\nlet initialNumberOfPosts = 100;\r\n\r\nconst INITIAL_STATE = { posts: [], initialNumberOfPosts, error: null };\r\n\r\nconst posts = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_ALL_POSTS: {\r\n      return { ...state, posts: payload, initialNumberOfPosts };\r\n    }\r\n\r\n    case FETCH_ALL_POSTS_FAILURE: {\r\n      return { ...state, error: payload };\r\n    }\r\n\r\n    case ADD_POST: {\r\n      const { title, body } = payload;\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts,\r\n          {\r\n            userId: 999,\r\n            id: ++state.initialNumberOfPosts,\r\n            title,\r\n            body\r\n          }\r\n        ]\r\n      };\r\n    }\r\n\r\n    case EDIT_POST: {\r\n      const { title, body, id } = payload;\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map(post =>\r\n          post.id === id ? { ...post, title, body } : post\r\n        )\r\n      };\r\n    }\r\n\r\n    case REMOVE_POST: {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(post => post.id !== payload.id)\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default posts;\r\n","import { FETCH_USERDATA, FETCH_USERDATA_FAILURE } from \"../actionTypes\";\r\n\r\nconst INITIAL_STATE = { users: [], error: null };\r\n\r\nconst users = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_USERDATA: {\r\n      return { ...state, users: [...state.users, payload] };\r\n    }\r\n\r\n    case FETCH_USERDATA_FAILURE: {\r\n      return { ...state, error: payload };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default users;\r\n","import { FETCH_COMMENTS, FETCH_COMMENTS_FAILURE } from \"../actionTypes\";\r\n\r\nconst INITIAL_STATE = { comments: [], error: null };\r\n\r\nconst comments = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_COMMENTS: {\r\n      return { ...state, comments: payload };\r\n      // return { ...state, comments: [...state.comments, payload] };\r\n      // if we wanna save comments in store\r\n    }\r\n\r\n    case FETCH_COMMENTS_FAILURE: {\r\n      return { ...state, error: payload };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default comments;\r\n","import { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport posts from \"./posts\";\r\nimport users from \"./users\";\r\nimport comments from \"./comments\";\r\n\r\nconst persistConfig = {\r\n  key: \"567234523345\",\r\n  storage,\r\n  whitelist: [\"posts\"]\r\n};\r\n\r\nconst rootReducer = combineReducers({ posts, users, comments });\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\n\r\nimport \"./Error404.scss\";\r\n\r\nconst Error404 = () => (\r\n  <div className=\"error-image-overlay\">\r\n    <div className=\"error-image-container\">\r\n      <div className=\"error-image-text\">\r\n        A Dog ate this page :( <br /> Please return to the homepage and refresh\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Error404;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Error404 from \"./Error404\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    hasErrored: false\r\n  };\r\n\r\n  static getDerivedStateFromError(_error) {\r\n    return { hasErrored: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    console.log(error, info);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasErrored) {\r\n      return <Error404 />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { lazy, Suspense } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\n\nconst HomePage = lazy(() => import(\"./pages/HomePage/HomePage\"));\nconst PostPage = lazy(() => import(\"./pages/PostPage/PostPage\"));\nconst AddPostPage = lazy(() => import(\"./pages/AddPostPage/AddPostPage\"));\n\nconst App = () => (\n  <Switch>\n    <ErrorBoundary>\n      <Suspense fallback={<div>loading...</div>}>\n        <Route exact path=\"/\" render={() => <Redirect to=\"/posts\" />} />\n        <Route exact path=\"/posts\" component={HomePage} />\n        <Route path=\"/posts/:id\" component={PostPage} />\n        <Route path=\"/add/post\" component={AddPostPage} />\n      </Suspense>\n    </ErrorBoundary>\n  </Switch>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HashRouter } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}