{"version":3,"sources":["assets/constants.js","redux/actions.js","components/CustomButton/CustomButton.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/PostInfo/PostInfo.js","components/ChangeForm/ChangeForm.js","pages/PostPage/PostPage.jsx"],"names":["API","customUser","id","username","name","phone","email","customUserId","postsPerPage","fetchAllPosts","dispatch","fetch","then","res","json","posts","type","FETCH_ALL_POSTS","payload","catch","err","FETCH_ALL_POSTS_FAILURE","fetchUserData","userId","FETCH_USERDATA","user","FETCH_USERDATA_FAILURE","fetchComments","postId","comment","FETCH_COMMENTS","FETCH_COMMENTS_FAILURE","addPost","data","ADD_POST","removePost","REMOVE_POST","editPost","EDIT_POST","CustomButton","color","text","to","className","onClick","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","prototype","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","TypeError","PostInfo","title","body","ChangeForm","onSubmit","handlerTitle","handlerBody","htmlFor","autoFocus","onChange","placeholder","required","rows","connect","state","users","comments","props","match","params","history","post","find","useState","open","setOpen","setData","useEffect","href","e","preventDefault","target","map","idx","key"],"mappings":"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","file":"static/js/3.8b052c64.chunk.js","sourcesContent":["export const API = `https://jsonplaceholder.typicode.com/`;\r\nexport const customUser = {\r\n  id: 999,\r\n  username: \"Custom username\",\r\n  name: \"Custom full name\",\r\n  phone: \"121212121212\",\r\n  email: \"custom.user@mail.ru\"\r\n};\r\nexport const customUserId = 999;\r\nexport const postsPerPage = 10;\r\n","import {\r\n  ADD_POST,\r\n  REMOVE_POST,\r\n  EDIT_POST,\r\n  FETCH_ALL_POSTS,\r\n  FETCH_ALL_POSTS_FAILURE,\r\n  FETCH_USERDATA,\r\n  FETCH_USERDATA_FAILURE,\r\n  FETCH_COMMENTS,\r\n  FETCH_COMMENTS_FAILURE\r\n} from \"./actionTypes\";\r\n\r\nimport { API, customUser } from \"../assets/constants\";\r\n\r\nexport const fetchAllPosts = () => dispatch => {\r\n  fetch(`${API}posts`)\r\n    .then(res => res.json())\r\n    .then(posts =>\r\n      dispatch({\r\n        type: FETCH_ALL_POSTS,\r\n        payload: posts\r\n      })\r\n    )\r\n    .catch(err =>\r\n      dispatch({\r\n        type: FETCH_ALL_POSTS_FAILURE,\r\n        payload: err\r\n      })\r\n    );\r\n};\r\n\r\nexport const fetchUserData = userId => dispatch => {\r\n  userId === customUser.id\r\n    ? dispatch({\r\n        type: FETCH_USERDATA,\r\n        payload: customUser\r\n      })\r\n    : fetch(`${API}users/${userId}`)\r\n        .then(res => res.json())\r\n        .then(user =>\r\n          dispatch({\r\n            type: FETCH_USERDATA,\r\n            payload: user\r\n          })\r\n        )\r\n        .catch(err =>\r\n          dispatch({\r\n            type: FETCH_USERDATA_FAILURE,\r\n            payload: err\r\n          })\r\n        );\r\n};\r\n\r\nexport const fetchComments = postId => dispatch => {\r\n  fetch(`${API}comments?postId=${postId}`)\r\n    .then(res => res.json())\r\n    .then(comment =>\r\n      dispatch({\r\n        type: FETCH_COMMENTS,\r\n        payload: comment\r\n      })\r\n    )\r\n    .catch(err =>\r\n      dispatch({\r\n        type: FETCH_COMMENTS_FAILURE,\r\n        payload: err\r\n      })\r\n    );\r\n};\r\n\r\nexport const addPost = ({ data }) => ({\r\n  type: ADD_POST,\r\n  payload: data\r\n});\r\n\r\nexport const removePost = id => ({\r\n  type: REMOVE_POST,\r\n  payload: { id }\r\n});\r\n\r\nexport const editPost = ({ data }) => ({\r\n  type: EDIT_POST,\r\n  payload: data\r\n});\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./CustomButton.scss\";\r\n\r\nconst CustomButton = ({ color, text, to, className, onClick }) => (\r\n  <>\r\n    {to ? (\r\n      <button className={`${className} ${color}`}>\r\n        <Link to={to}>{text}</Link>\r\n      </button>\r\n    ) : (\r\n      <button onClick={onClick} className={color}>\r\n        {text}\r\n      </button>\r\n    )}\r\n  </>\r\n);\r\n\r\nCustomButton.propTypes = {\r\n  color: PropTypes.string,\r\n  text: PropTypes.string,\r\n  to: PropTypes.string,\r\n  className: PropTypes.string,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default CustomButton;\r\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./PostInfo.scss\";\r\n\r\nconst PostInfo = ({ data }) => (\r\n  <div className=\"info\">\r\n    <h3>{data.title}</h3>\r\n    <p>{data.body}</p>\r\n    <p>#{data.id}</p>\r\n  </div>\r\n);\r\n\r\nPostInfo.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n};\r\n\r\nexport default PostInfo;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ChangeForm.scss\";\r\n\r\nconst ChangeForm = ({ onSubmit, handlerTitle, handlerBody, text }) => (\r\n  <form className=\"form-edit\" onSubmit={onSubmit}>\r\n    <div>\r\n      <label htmlFor=\"title\">Title</label>\r\n      <input\r\n        autoFocus\r\n        onChange={handlerTitle}\r\n        id=\"title\"\r\n        type=\"text\"\r\n        placeholder=\"Title...\"\r\n        required\r\n      />\r\n    </div>\r\n\r\n    <div>\r\n      <label htmlFor=\"text\">Text</label>\r\n      <textarea\r\n        onChange={handlerBody}\r\n        id=\"text\"\r\n        rows=\"10\"\r\n        placeholder=\"Text...\"\r\n        required\r\n      ></textarea>\r\n    </div>\r\n\r\n    <button type=\"submit\">{text}</button>\r\n  </form>\r\n);\r\n\r\nChangeForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  handlerTitle: PropTypes.func.isRequired,\r\n  handlerBody: PropTypes.func.isRequired,\r\n  text: PropTypes.string\r\n};\r\n\r\nexport default ChangeForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchUserData,\r\n  fetchComments,\r\n  removePost,\r\n  editPost\r\n} from \"../../redux/actions\";\r\n\r\nimport PostInfo from \"../../components/PostInfo/PostInfo\";\r\nimport CustomButton from \"../../components/CustomButton/CustomButton\";\r\nimport ChangeForm from \"../../components/ChangeForm/ChangeForm\";\r\n\r\nimport { customUserId } from \"../../assets/constants\";\r\n\r\nimport \"./PostPage.scss\";\r\n\r\nconst PostPage = props => {\r\n  const {\r\n    fetchUserData,\r\n    fetchComments,\r\n    removePost,\r\n    editPost,\r\n    comments,\r\n    posts,\r\n    users,\r\n    match: {\r\n      params: { id }\r\n    },\r\n    history\r\n  } = props;\r\n\r\n  const post = posts.find(post => post.id === +id);\r\n  const user = users.find(user => user.id === post.userId);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [data, setData] = useState({\r\n    title: \"\",\r\n    body: \"\",\r\n    id: +id\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchComments(id);\r\n    if (post.userId === customUserId) {\r\n      fetchUserData(customUserId);\r\n      return;\r\n    }\r\n    if (!user) {\r\n      fetchUserData(post.userId);\r\n    }\r\n  }, [fetchComments, fetchUserData, id, post.userId, user]);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    editPost({ data });\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <main className=\"postpage\">\r\n      <div className=\"heading\">\r\n        <CustomButton\r\n          className=\"go-back\"\r\n          to=\"/posts\"\r\n          color=\"black\"\r\n          text=\"Go back\"\r\n        />\r\n\r\n        <h1>Post #{id}</h1>\r\n      </div>\r\n\r\n      {user && (\r\n        <section className=\"user-info\">\r\n          <h2>Author</h2>\r\n          <h3>Username - {user.username}</h3>\r\n          <h4>Real name - {user.name}</h4>\r\n          <p>\r\n            Email - <a href={`mailto:${user.email}`}>{user.email}</a>\r\n          </p>\r\n          <p>\r\n            Phone - <a href={`tel:${user.phone}`}>{user.phone}</a>\r\n          </p>\r\n        </section>\r\n      )}\r\n\r\n      <section className=\"post-info\">\r\n        <PostInfo data={post} />\r\n\r\n        <div className=\"buttons\">\r\n          <CustomButton\r\n            onClick={() => setOpen(!open)}\r\n            color=\"blue\"\r\n            text=\"Edit\"\r\n          />\r\n\r\n          <CustomButton\r\n            onClick={() => {\r\n              removePost(+id);\r\n              history.push(`/posts`);\r\n            }}\r\n            color=\"red\"\r\n            text=\"Delete\"\r\n          />\r\n        </div>\r\n      </section>\r\n\r\n      {open && (\r\n        <ChangeForm\r\n          text=\"Save\"\r\n          onSubmit={onSubmit}\r\n          handlerTitle={e =>\r\n            setData({ title: e.target.value, body: data.body, id: +id })\r\n          }\r\n          handlerBody={e =>\r\n            setData({ body: e.target.value, title: data.title, id: +id })\r\n          }\r\n        />\r\n      )}\r\n\r\n      <section className=\"comments\">\r\n        <h3>Comments</h3>\r\n        <ul>\r\n          {comments.map((comment, idx) => (\r\n            <li key={idx}>\r\n              <a href={`mailto:${comment.email}`}>{comment.email}</a>\r\n              <h4>{comment.name}</h4>\r\n              <p>{comment.body}</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nPostPage.propTypes = {\r\n  fetchUserData: PropTypes.func.isRequired,\r\n  fetchComments: PropTypes.func.isRequired,\r\n  removePost: PropTypes.func.isRequired,\r\n  editPost: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  users: PropTypes.array.isRequired,\r\n  comments: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.posts,\r\n  users: state.users,\r\n  comments: state.comments\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchUserData,\r\n  fetchComments,\r\n  removePost,\r\n  editPost\r\n})(PostPage);\r\n"],"sourceRoot":""}