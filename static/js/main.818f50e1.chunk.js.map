{"version":3,"sources":["redux/reducers/posts.js","redux/reducers/users.js","redux/reducers/comments.js","redux/reducers/index.js","redux/store.js","App.js","index.js","redux/actionTypes.js"],"names":["INITIAL_STATE","posts","state","type","payload","FETCH_ALL_POSTS","length","ADD_POST","title","body","userId","id","EDIT_POST","map","post","REMOVE_POST","filter","users","FETCH_USERDATA","comments","FETCH_COMMENTS","persistConfig","key","storage","whitelist","rootReducer","combineReducers","persistReducer","middlewares","thunk","store","createStore","applyMiddleware","persistor","persistStore","HomePage","lazy","PostPage","AddPostPage","App","fallback","exact","path","render","to","component","ReactDOM","basename","process","document","getElementById"],"mappings":"sTAOMA,EAAgB,CAAEC,MAAO,IA8ChBA,EA5CD,WAA+C,IAA9CC,EAA6C,uDAArCF,EAAqC,yCAApBG,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC5C,OAAQD,GACN,KAAKE,IACH,MAAO,CACLJ,MAAOG,EACPE,OAAQF,EAAQE,QAIpB,KAAKC,IAAW,IACNC,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,KACf,MAAO,CACLR,MAAM,GAAD,mBACAC,EAAMD,OADN,CAEH,CACES,OAAQ,IACRC,KAAMT,EAAMD,MAAMK,OAClBE,QACAC,WAMR,KAAKG,IAAY,IACPJ,EAAoBJ,EAApBI,MAAOC,EAAaL,EAAbK,KAAME,EAAOP,EAAPO,GACrB,MAAO,CACLV,MAAOC,EAAMD,MAAMY,KAAI,SAAAC,GAAI,OACzBA,EAAKH,KAAOA,EAAZ,eAAsBG,EAAtB,CAA4BN,QAAOC,SAASK,MAKlD,KAAKC,IACH,MAAO,CACLd,MAAOC,EAAMD,MAAMe,QAAO,SAAAF,GAAI,OAAIA,EAAKH,KAAOP,EAAQO,OAI1D,QACE,OAAOT,IC/CPF,EAAgB,GAaPiB,EAXD,WAA+C,IAA9Cf,EAA6C,uDAArCF,EAAqC,yCAApBG,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC5C,OAAQD,GACN,KAAKe,IACH,MAAM,GAAN,mBAAWhB,GAAX,CAAkBE,IAGpB,QACE,OAAOF,ICTPF,EAAgB,GAcPmB,EAZE,WAA+C,IAA9CjB,EAA6C,uDAArCF,EAAqC,yCAApBG,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC/C,OAAQD,GACN,KAAKiB,IAEH,OAAOhB,EAGT,QACE,OAAOF,ICJPmB,EAAgB,CACpBC,IAAK,QACLC,YACAC,UAAW,CAAC,UAGRC,EAAcC,YAAgB,CAAEzB,QAAOgB,QAAOE,aAErCQ,cAAeN,EAAeI,GCTvCG,EAAc,CAACC,KAMd,IAAMC,EAAQC,YAAYN,EAAaO,IAAe,WAAf,EAAmBJ,IAEpDK,EAAYC,YAAaJ,G,gBCRhCK,G,MAAWC,gBAAK,kBAAM,iCACtBC,EAAWD,gBAAK,kBAAM,gCACtBE,EAAcF,gBAAK,kBAAM,gCAehBG,EAbH,kBACV,kBAAC,IAAD,KAEE,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,cACjD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASG,UAAWV,IACtC,kBAAC,IAAD,CAAOO,KAAK,aAAaG,UAAWR,IACpC,kBAAC,IAAD,CAAOK,KAAK,YAAYG,UAAWP,OCLzCQ,IAASH,OACP,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,IAAD,CAAaG,UAAWA,GACtB,kBAAC,IAAD,CAAec,SAAUC,oBACvB,kBAAC,EAAD,SAINC,SAASC,eAAe,U,+BCrB1B,4MAAO,IAAM3C,EAAW,WACXQ,EAAc,cACdH,EAAY,YACZP,EAAkB,kBAClBa,EAAiB,iBACjBE,EAAiB,mB","file":"static/js/main.818f50e1.chunk.js","sourcesContent":["import {\r\n  ADD_POST,\r\n  REMOVE_POST,\r\n  EDIT_POST,\r\n  FETCH_ALL_POSTS\r\n} from \"../actionTypes\";\r\n\r\nconst INITIAL_STATE = { posts: [] };\r\n\r\nconst posts = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_ALL_POSTS: {\r\n      return {\r\n        posts: payload,\r\n        length: payload.length\r\n      };\r\n    }\r\n\r\n    case ADD_POST: {\r\n      const { title, body } = payload;\r\n      return {\r\n        posts: [\r\n          ...state.posts,\r\n          {\r\n            userId: 999,\r\n            id: ++state.posts.length,\r\n            title,\r\n            body\r\n          }\r\n        ]\r\n      };\r\n    }\r\n\r\n    case EDIT_POST: {\r\n      const { title, body, id } = payload;\r\n      return {\r\n        posts: state.posts.map(post =>\r\n          post.id === id ? { ...post, title, body } : post\r\n        )\r\n      };\r\n    }\r\n\r\n    case REMOVE_POST: {\r\n      return {\r\n        posts: state.posts.filter(post => post.id !== payload.id)\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default posts;\r\n","import { FETCH_USERDATA } from \"../actionTypes\";\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nconst users = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_USERDATA: {\r\n      return [...state, payload];\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default users;\r\n","import { FETCH_COMMENTS } from \"../actionTypes\";\r\n\r\nconst INITIAL_STATE = [];\r\n\r\nconst comments = (state = INITIAL_STATE, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_COMMENTS: {\r\n      // return [...state, payload];\r\n      return payload;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default comments;\r\n","import { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport posts from \"./posts\";\r\nimport users from \"./users\";\r\nimport comments from \"./comments\";\r\n\r\nconst persistConfig = {\r\n  key: \"99912\",\r\n  storage,\r\n  whitelist: [\"posts\"]\r\n};\r\n\r\nconst rootReducer = combineReducers({ posts, users, comments });\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n\r\n// export default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  middlewares.push(logger);\r\n}\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport const persistor = persistStore(store);\r\n","import React, { lazy, Suspense } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./App.css\";\n\n// import ErrorBoundary from \"./components/ErrorBoundary/ErrorBoundary\";\n\nconst HomePage = lazy(() => import(\"./pages/HomePage/HomePage\"));\nconst PostPage = lazy(() => import(\"./pages/PostPage/PostPage\"));\nconst AddPostPage = lazy(() => import(\"./pages/AddPostPage/AddPostPage\"));\n\nconst App = () => (\n  <Switch>\n    {/* <ErrorBoundary> */}\n    <Suspense fallback={<div>loading...</div>}>\n      <Route exact path=\"/\" render={() => <Redirect to=\"/posts\" />} />\n      <Route exact path=\"/posts\" component={HomePage} />\n      <Route path=\"/posts/:id\" component={PostPage} />\n      <Route path=\"/add/post\" component={AddPostPage} />\n    </Suspense>\n    {/* </ErrorBoundary> */}\n  </Switch>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport { Provider } from \"react-redux\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","export const ADD_POST = \"ADD_POST\";\r\nexport const REMOVE_POST = \"REMOVE_POST\";\r\nexport const EDIT_POST = \"EDIT_POST\";\r\nexport const FETCH_ALL_POSTS = \"FETCH_ALL_POSTS\";\r\nexport const FETCH_USERDATA = \"FETCH_USERDATA\";\r\nexport const FETCH_COMMENTS = \"FETCH_COMMENTS\";\r\n"],"sourceRoot":""}